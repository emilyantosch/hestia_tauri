//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use async_trait::async_trait;
use sea_orm::{entity::prelude::*, sqlx::types::chrono};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "folders")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub content_hash: String,
    pub identity_hash: String,
    pub structure_hash: String,
    pub file_system_id: i32,
    pub parent_folder_id: Option<i32>,
    pub name: String,
    pub path: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::file_system_identifier::Entity",
        from = "Column::FileSystemId",
        to = "super::file_system_identifier::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    FileSystemIdentifier,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentFolderId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
}

impl Related<super::file_system_identifier::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileSystemIdentifier.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.created_at = sea_orm::Set(chrono::Local::now().naive_local());
            self.updated_at = sea_orm::Set(chrono::Local::now().naive_local());
            return Ok(self);
        }

        self.updated_at = sea_orm::Set(chrono::Local::now().naive_local());
        Ok(self)
    }
}
