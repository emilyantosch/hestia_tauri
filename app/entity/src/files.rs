//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::{entity::prelude::*, prelude::async_trait::async_trait};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "files")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub path: String,
    pub hash: String,
    pub file_size: i32,
    pub file_type_id: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::file_has_tags::Entity")]
    FileHasTags,
    #[sea_orm(
        belongs_to = "super::file_types::Entity",
        from = "Column::FileTypeId",
        to = "super::file_types::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FileTypes,
}

impl Related<super::file_has_tags::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileHasTags.def()
    }
}

impl Related<super::file_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FileTypes.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, c: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        let x = 10;
        if insert {
            println!("Inserting")
        } else {
            println!("Updating")
        }
        Ok(self)
    }
}
