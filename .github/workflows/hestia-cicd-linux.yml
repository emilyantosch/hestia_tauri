name: Hestia CI/CD

on:
  push:
    branches: [ "main", "dev", "test", "cicd" ]
  pull_request:
    branches: ["main", "dev", "test"]

permissions:
  contents: read #---deno---

jobs: #can run in parallel when creating seperate jobs
  hestia-build-linux:
    name: hestia on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # os: [ubuntu-latest]

    env:
      CARGO_TERM_COLOR: always
      GTK_DEBUG: "interactive"
      WEBKIT_DISABLE_DMABUF_RENDERER: "1"
      GSETTINGS_SCHEMA_DIR: "${pkgs.gtk3}/share/gsettings-schemas/${pkgs.gtk3.name}/glib-2.0/schemas"
      GDK_RENDERER: "x11"

    steps:
      - name: Setup cicd repo
        uses: actions/checkout@v4

      - name: Install system dependencies for ubuntu # tauri v2 https://tauri.app/start/prerequisites/
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            xvfb  # For launching gui apps in cicd

      - name: Start Xvfb - virtual frame buffer
        if: matrix.os == 'ubuntu-latest'
        run: |
          Xvfb :99 -screen 0 1920x1080x24 &
          export DISPLAY=:99  # Set the DISPLAY environment variable

      - name: Install deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Initilize deno dev environment
        run: |
          cd ./app
          deno install

      - name: install rust toolchain (macos)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' || '' }}


      - name: cargo version
        run: |
          echo "cargo version in use: $(cargo --version)"

      - name: cargo check
        run: cargo check --manifest-path=./app/Cargo.toml --verbose

      - name: cargo build
        # if: always() #runs even if prior test failed
        run: cargo build --manifest-path=./app/Cargo.toml --verbose

      - name: cargo test
        if: always()
        run: timeout 120s cargo test --manifest-path=./app/Cargo.toml --verbose

      - name: Use Tauri action
        uses: tauri-apps/tauri-action@v0
        with:
          projectPath: ./app
          # distPath: ../dist

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      - name: deno fmt
        if: always()
        run: deno fmt ./app/src --check

      - name: deno linter
        if: always()
        run: deno lint ./app/src #for website add different pipeline

      - name: deno run
        if: always()
        run: |
          cd ./app
          deno task tauri dev
          # deno test tauri dev
    # steps:
    #   - name: trivy checks

# # jobs for macos and windows, (not tested yet) are inactive for now to save minutes
#   hestia-build-macos:
#     name: hestia build
#     runs-on: macos-latest
#     env:
#       CARGO_TERM_COLOR: always
#     # runs-on: [ ubuntu-latest, windows-latest, macos-latest ]
#
#     steps:
#       - name: Setup cicd repo
#         uses: actions/checkout@v4
#
#       - name: Install deno
#         uses: denoland/setup-deno@v2
#         with:
#           deno-version: v2.x
#
#       - name: Initilize deno dev environment
#         run: |
#           cd ./app
#           deno install
#
#       - name: cargo version
#         run: |
#           echo "cargo version in use: $(cargo --version)"
#
#       - name: cargo check
#         run: cargo check --manifest-path=./app/Cargo.toml --verbose
#
#       - name: cargo build
#         # if: always() #runs even if prior test failed
#         run: cargo build --manifest-path=./app/Cargo.toml --verbose
#
#       - name: cargo test
#         if: always()
#         run: cargo test --manifest-path=./app/Cargo.toml --verbose
#
#       # Uncomment this step to verify the use of 'deno fmt' on each commit.
#       - name: deno verify formatting
#         if: always()
#         run: deno fmt --check
#
#       - name: deno run linter
#         if: always()
#         run: deno lint
#
#       - name: Run tests
#         if: always()
#         run: |
#           cd ./app
#           deno task tauri dev
#           # deno test tauri dev
#     # steps:
#     #   - name: trivy checks
#
#   hestia-build-windows:
#     name: hestia build
#     runs-on: windows-latest
#     env:
#       CARGO_TERM_COLOR: always
#
#     steps:
#       - name: Setup cicd repo
#         uses: actions/checkout@v4
#
#       - name: Install deno
#         uses: denoland/setup-deno@v2
#         with:
#           deno-version: v2.x
#
#       - name: Initilize deno dev environment
#         run: |
#           cd ./app
#           deno install
#
#       - name: cargo version
#         run: |
#           echo "cargo version in use: $(cargo --version)"
#
#       - name: cargo check
#         run: cargo check --manifest-path=./app/Cargo.toml --verbose
#
#       - name: cargo build
#         # if: always() #runs even if prior test failed
#         run: cargo build --manifest-path=./app/Cargo.toml --verbose
#
#       - name: cargo test
#         if: always()
#         run: cargo test --manifest-path=./app/Cargo.toml --verbose
#
#       # Uncomment this step to verify the use of 'deno fmt' on each commit.
#       - name: deno verify formatting
#         if: always()
#         run: deno fmt --check
#
#       - name: deno run linter
#         if: always()
#         run: deno lint
#
#       - name: Run tests
#         if: always()
#         run: |
#           cd ./app
#           deno task tauri dev
#           # deno test tauri dev
#     # steps:
#     #   - name: trivy checks
#
